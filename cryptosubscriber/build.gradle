plugins {
    id 'java'
    id 'org.springframework.boot' version '2.2.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
}

group 'io.beam.exp'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }

}

repositories {
    mavenCentral()
}

dependencies {
    compile project(':cryptorealtime')
    //implementation 'org.springframework.boot:spring-boot-starter-actuator'
    //implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    //implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation "com.google.firebase:firebase-admin:${firebaseVersion}"

    compile group: 'com.google.code.gson', name: 'gson', version: "$gsonVersion"

    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "$jacksonDataBindVersion"

    compile ('org.springframework.boot:spring-boot-starter-actuator') {
        exclude module : 'spring-boot-starter-logging'
    }
    compile ('org.springframework.boot:spring-boot-starter') {
        exclude module : 'spring-boot-starter-logging'
    }
    compile ('org.springframework.boot:spring-boot-starter-web') {
        exclude module : 'spring-boot-starter-logging'
    }

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")

    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "org.slf4j:slf4j-log4j12:$slf4jVersion"
    compile "org.apache.logging.log4j:log4j-core:$log4jVersion"


    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

}

test {
    useJUnitPlatform {
        //includeTags 'io.beam.exp.cryptorealtime.model','controllers'
        excludeTags 'integration'
    }
    testLogging.showStandardStreams = true

    testLogging {
        events "passed", "skipped", "failed"
    }
}

task integrationTest(type: Test) {
    useJUnitPlatform {
        includeTags 'integration'
    }
    check.dependsOn it
    shouldRunAfter test
    testLogging.showStandardStreams = true

    testLogging {
        events "passed", "skipped", "failed"
    }
}